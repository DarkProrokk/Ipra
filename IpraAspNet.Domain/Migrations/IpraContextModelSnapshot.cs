// <auto-generated />
using System;
using IpraAspNet.Domain.Context;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;

#nullable disable

namespace IpraAspNet.Domain.Migrations
{
    [DbContext(typeof(IpraContext))]
    partial class IpraContextModelSnapshot : ModelSnapshot
    {
        protected override void BuildModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .UseCollation("ru_RU.UTF-8")
                .HasAnnotation("ProductVersion", "8.0.3")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("IpraAspNet.Domain.Entities.AddressType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("IdMse")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("AddressType", null, t =>
                        {
                            t.HasTrigger("AddressTypeUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Buro", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("IdMse")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Shortname")
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Buro", null, t =>
                        {
                            t.HasTrigger("BuroUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Citizenship", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("IdMse")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Citizenship", null, t =>
                        {
                            t.HasTrigger("CitizenshipUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.District", b =>
                {
                    b.Property<int?>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.ToTable("District");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.DocType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("DocType", null, t =>
                        {
                            t.HasTrigger("DocTypeUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.DysfunctionsDegree", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BloodAndImmune")
                        .HasColumnType("int");

                    b.Property<int?>("BloodCirculation")
                        .HasColumnType("int");

                    b.Property<int?>("BottomLimbs")
                        .HasColumnType("int");

                    b.Property<int?>("Breath")
                        .HasColumnType("int");

                    b.Property<int?>("Digestive")
                        .HasColumnType("int");

                    b.Property<int?>("Excretory")
                        .HasColumnType("int");

                    b.Property<int?>("Hearing")
                        .HasColumnType("int");

                    b.Property<int?>("Intellect")
                        .HasColumnType("int");

                    b.Property<int?>("Lingual")
                        .HasColumnType("int");

                    b.Property<int?>("Metabolism")
                        .HasColumnType("int");

                    b.Property<int?>("PhisicalDysfunction")
                        .HasColumnType("int");

                    b.Property<int?>("Skin")
                        .HasColumnType("int");

                    b.Property<int?>("UpperLimbs")
                        .HasColumnType("int");

                    b.Property<int?>("Vision")
                        .HasColumnType("int");

                    b.Property<int?>("VisionAndHearing")
                        .HasColumnType("int");

                    b.Property<int?>("WheelChair")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("DysfunctionsDegrees");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.EventSubtype", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int>("TypeId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("TypeId");

                    b.ToTable("EventSubtype");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.EventType", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("EventType");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Executor", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Fullname")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("Shortname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.ToTable("Executors");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Files", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<string>("Path")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("PatientId")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("PatientId");

                    b.ToTable("Files");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.FuncCompensation", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("IdMse")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("FuncCompensation", null, t =>
                        {
                            t.HasTrigger("FuncCompensationUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.FuncRecovery", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("IdMse")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("FuncRecovery", null, t =>
                        {
                            t.HasTrigger("FuncRecoveryUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.GroupsTask", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTS")
                        .HasColumnType("datetime");

                    b.Property<string>("FolderName")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id")
                        .HasName("PK_DroupTask");

                    b.HasIndex("UserId");

                    b.ToTable("GroupsTasks");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.HelpCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int?>("IdMse")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("HelpCategory", null, t =>
                        {
                            t.HasTrigger("HelpCategoryUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Ipra", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<bool>("AllowedWebAccess")
                        .HasColumnType("bit");

                    b.Property<int?>("BehaviorControl")
                        .HasColumnType("int");

                    b.Property<int?>("BloodAndImmune")
                        .HasColumnType("int");

                    b.Property<int?>("BloodCirculation")
                        .HasColumnType("int");

                    b.Property<int?>("BottomLimbs")
                        .HasColumnType("int");

                    b.Property<int?>("Breath")
                        .HasColumnType("int");

                    b.Property<string>("BuroHeadLastname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuroHeadName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("BuroHeadSurname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("BuroId")
                        .HasColumnType("int");

                    b.Property<int?>("CitizenshipId")
                        .HasColumnType("int");

                    b.Property<int?>("Communicate")
                        .HasColumnType("int");

                    b.Property<DateTime?>("CompliteRepportDate")
                        .HasColumnType("datetime");

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int?>("DDId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("DecisionDate")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("DevelopDate")
                        .HasColumnType("date");

                    b.Property<int?>("Digestive")
                        .HasColumnType("int");

                    b.Property<string>("DisabilityCause")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DisabilityEndDate")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("DisabilityGroup")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("DisabilityGroupDate")
                        .HasColumnType("datetime");

                    b.Property<DateOnly?>("EndDate")
                        .HasColumnType("date");

                    b.Property<int?>("Excretory")
                        .HasColumnType("int");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int?>("FuncCompensation")
                        .HasColumnType("int");

                    b.Property<int?>("FuncRecovery")
                        .HasColumnType("int");

                    b.Property<string>("GuidMse")
                        .IsRequired()
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<bool?>("HasNoLivingAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<bool?>("HasNoRegAddress")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<int?>("Hearing")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("IdentDocDate")
                        .HasColumnType("date");

                    b.Property<string>("IdentDocIssuer")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("IdentDocNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdentDocSeries")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("IdentDocTitle")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<int?>("Intellect")
                        .HasColumnType("int");

                    b.Property<bool?>("IsAgreed")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsDisabilityGroupPrimary")
                        .HasColumnType("bit");

                    b.Property<bool>("IsEndless")
                        .HasColumnType("bit");

                    b.Property<bool>("IsFirst")
                        .HasColumnType("bit");

                    b.Property<bool>("IsForChild")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsIntramural")
                        .HasColumnType("bit");

                    b.Property<bool?>("IsRepresentativeSign")
                        .HasColumnType("bit");

                    b.Property<DateOnly>("IssueDate")
                        .HasColumnType("date");

                    b.Property<int?>("Learning")
                        .HasColumnType("int");

                    b.Property<int?>("LifeRestrictionBehaviorControl")
                        .HasColumnType("int");

                    b.Property<int?>("LifeRestrictionCommunication")
                        .HasColumnType("int");

                    b.Property<int?>("LifeRestrictionLearn")
                        .HasColumnType("int");

                    b.Property<int?>("LifeRestrictionMoving")
                        .HasColumnType("int");

                    b.Property<int?>("LifeRestrictionOrientation")
                        .HasColumnType("int");

                    b.Property<int?>("LifeRestrictionSelfCare")
                        .HasColumnType("int");

                    b.Property<int?>("LifeRestrictionWork")
                        .HasColumnType("int");

                    b.Property<int?>("Lingual")
                        .HasColumnType("int");

                    b.Property<string>("LivingAddressAppartment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LivingAddressBuilding")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LivingAddressCityDistrict")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LivingAddressCorpus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LivingAddressCountry")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("LivingAddressDistrict")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("LivingAddressDistrictGuidMse")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("LivingAddressHouse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LivingAddressHouseGuidMse")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("LivingAddressPlace")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LivingAddressPlaceGuidMse")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("LivingAddressPlaceKindIdMse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LivingAddressPlaceKindName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LivingAddressPlaceTypeIdMse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LivingAddressPlaceTypeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("LivingAddressStreet")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("LivingAddressStreetGuidMse")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("LivingAddressString")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("LivingAddressTerritoryGuidMse")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("LivingAddressTerritoryIdMse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("LivingAddressTerritoryName")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("LivingAddressTypeId")
                        .HasColumnType("int");

                    b.Property<string>("LivingAddressZipcode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<string>("MedRehabExecutor")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("MedRehabIsEndless")
                        .HasColumnType("bit");

                    b.Property<bool>("MedRehabNeed")
                        .HasColumnType("bit");

                    b.Property<DateOnly?>("MedRehabPeriodFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("MedRehabPeriodTo")
                        .HasColumnType("date");

                    b.Property<int?>("Metabolism")
                        .HasColumnType("int");

                    b.Property<int?>("MoId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<int?>("MoveIndependently")
                        .HasColumnType("int");

                    b.Property<bool?>("NeedCarConclusion")
                        .HasColumnType("bit");

                    b.Property<string>("Number")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("Orientate")
                        .HasColumnType("int");

                    b.Property<int?>("PRId")
                        .HasColumnType("int");

                    b.Property<int?>("PatientAgeMonths")
                        .HasColumnType("int");

                    b.Property<int?>("PatientAgeMonthsMse")
                        .HasColumnType("int");

                    b.Property<string>("PatientAgeText")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PatientAgeYears")
                        .HasColumnType("int");

                    b.Property<int?>("PatientAgeYearsMse")
                        .HasColumnType("int");

                    b.Property<string>("PatientBirthdayMse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientEmail")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientGuidMse")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<int>("PatientId")
                        .HasColumnType("int");

                    b.Property<bool?>("PatientIsMale")
                        .HasColumnType("bit");

                    b.Property<string>("PatientLastnameMse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientNameMse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientPhone")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("PatientSnilsMse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientSurnameMse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("PhisicalDysfunction")
                        .HasColumnType("int");

                    b.Property<int?>("PreviousIpraId")
                        .HasColumnType("int");

                    b.Property<int?>("PrognozCompensationId")
                        .HasColumnType("int");

                    b.Property<int?>("PrognozRecoveryId")
                        .HasColumnType("int");

                    b.Property<string>("ProsthesisExecutor")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("ProsthesisIsEndless")
                        .HasColumnType("bit");

                    b.Property<bool?>("ProsthesisNeed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateOnly?>("ProsthesisPeriodFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ProsthesisPeriodTo")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ProtocolDate")
                        .HasColumnType("date");

                    b.Property<string>("ProtocolNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RecipientAddress")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RecipientName")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("RecipientTypeId")
                        .HasColumnType("int");

                    b.Property<string>("ReconsSurgeryExecutor")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("ReconsSurgeryIsEndless")
                        .HasColumnType("bit");

                    b.Property<bool?>("ReconsSurgeryNeed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateOnly?>("ReconsSurgeryPeriodFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ReconsSurgeryPeriodTo")
                        .HasColumnType("date");

                    b.Property<string>("RegAddressAppartment")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegAddressBuilding")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegAddressCityDistrict")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegAddressCorpus")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegAddressCountry")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RegAddressDistrict")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegAddressDistrictGuidMse")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("RegAddressHouse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegAddressHouseGuidMse")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("RegAddressPlace")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegAddressPlaceGuidMse")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("RegAddressPlaceKindIdMse")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegAddressPlaceKindName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegAddressPlaceTypeIdMse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegAddressPlaceTypeName")
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.Property<string>("RegAddressStreet")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RegAddressStreetGuidMse")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("RegAddressString")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RegAddressTerritoryGuidMse")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("RegAddressTerritoryIdMse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RegAddressTerritoryName")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("RegAddressTypeId")
                        .HasColumnType("int");

                    b.Property<string>("RegAddressZipcode")
                        .HasMaxLength(6)
                        .HasColumnType("nvarchar(6)");

                    b.Property<int?>("RehabPotential")
                        .HasColumnType("int");

                    b.Property<int?>("RehabPrognoz")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("RepresentativeAuthDocDate")
                        .HasColumnType("date");

                    b.Property<string>("RepresentativeAuthDocIssuer")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RepresentativeAuthDocNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RepresentativeAuthDocSeries")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RepresentativeAuthDocType")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("RepresentativeIdentDocDate")
                        .HasColumnType("date");

                    b.Property<string>("RepresentativeIdentDocIssuer")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("RepresentativeIdentDocNumber")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RepresentativeIdentDocSeries")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int?>("RepresentativeIdentDocType")
                        .HasColumnType("int");

                    b.Property<string>("RepresentativeLastname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RepresentativeName")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("RepresentativeSurname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("ResortExecutor")
                        .HasMaxLength(200)
                        .HasColumnType("nvarchar(200)");

                    b.Property<bool?>("ResortIsEndless")
                        .HasColumnType("bit");

                    b.Property<bool?>("ResortNeed")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("bit")
                        .HasDefaultValue(false);

                    b.Property<DateOnly?>("ResortPeriodFrom")
                        .HasColumnType("date");

                    b.Property<DateOnly?>("ResortPeriodTo")
                        .HasColumnType("date");

                    b.Property<string>("SectorName")
                        .HasMaxLength(200)
                        .HasColumnType("nchar(200)")
                        .IsFixedLength();

                    b.Property<string>("SectorNumber")
                        .HasMaxLength(200)
                        .HasColumnType("nchar(200)")
                        .IsFixedLength();

                    b.Property<string>("SectorType")
                        .HasMaxLength(200)
                        .HasColumnType("nchar(200)")
                        .IsFixedLength();

                    b.Property<int?>("SelfService")
                        .HasColumnType("int");

                    b.Property<string>("SenderMoAddressMSE")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("SenderMoId")
                        .HasColumnType("int");

                    b.Property<string>("SenderMoName")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("SenderMoNameMSE")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<string>("SenderMoOgrnMSE")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<int?>("Skin")
                        .HasColumnType("int");

                    b.Property<int>("StatusId")
                        .HasColumnType("int");

                    b.Property<int?>("UpperLimbs")
                        .HasColumnType("int");

                    b.Property<int?>("Vision")
                        .HasColumnType("int");

                    b.Property<int?>("VisionAndHearing")
                        .HasColumnType("int");

                    b.Property<int?>("WheelChair")
                        .HasColumnType("int");

                    b.Property<int?>("Work")
                        .HasColumnType("int");

                    b.HasKey("id");

                    b.HasIndex("BuroId");

                    b.HasIndex("CitizenshipId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("DDId");

                    b.HasIndex("FileId");

                    b.HasIndex("LivingAddressTypeId");

                    b.HasIndex("MoId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("PRId");

                    b.HasIndex("PatientId");

                    b.HasIndex("PrognozCompensationId");

                    b.HasIndex("PrognozRecoveryId");

                    b.HasIndex("RecipientTypeId");

                    b.HasIndex("RegAddressTypeId");

                    b.HasIndex("RepresentativeAuthDocType");

                    b.HasIndex("RepresentativeIdentDocType");

                    b.HasIndex("SenderMoId");

                    b.HasIndex("StatusId");

                    b.ToTable("Ipra", null, t =>
                        {
                            t.HasTrigger("IpraInsMovesHistory");

                            t.HasTrigger("IpraUpdMovesHistory");

                            t.HasTrigger("IpraUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.IpraHelpCategory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("HelpCategoryId")
                        .HasColumnType("int");

                    b.Property<int>("IpraId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("HelpCategoryId");

                    b.HasIndex("IpraId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("IpraHelpCategory", null, t =>
                        {
                            t.HasTrigger("IpraHelpCategoryUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.IpraMovesHistory", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("IpraId")
                        .HasColumnType("int");

                    b.Property<int>("MoveId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("IpraId");

                    b.HasIndex("MoveId");

                    b.ToTable("IpraMovesHistory");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.IpraStatus", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("IpraStatus", null, t =>
                        {
                            t.HasTrigger("IpraStatusUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.MO", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("DbName")
                        .HasMaxLength(10)
                        .HasColumnType("nchar(10)")
                        .IsFixedLength();

                    b.Property<string>("FomsCode")
                        .HasMaxLength(6)
                        .HasColumnType("nchar(6)")
                        .IsFixedLength();

                    b.Property<string>("Fullname")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.Property<bool>("IsInMiac")
                        .HasColumnType("bit");

                    b.Property<int?>("LevelOmp")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Ogrn")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("OidEgisz")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Shortname")
                        .IsRequired()
                        .HasMaxLength(100)
                        .HasColumnType("nvarchar(100)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("MO", null, t =>
                        {
                            t.HasTrigger("MOUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Move", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Move", null, t =>
                        {
                            t.HasTrigger("MoveUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Patient", b =>
                {
                    b.Property<int>("id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("id"));

                    b.Property<DateOnly?>("Birthday")
                        .HasColumnType("date");

                    b.Property<DateTime>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateOnly?>("DeathDate")
                        .HasColumnType("date");

                    b.Property<string>("ENP")
                        .HasMaxLength(16)
                        .HasColumnType("nvarchar(16)");

                    b.Property<string>("Lastname")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<DateTime>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Snils")
                        .HasMaxLength(14)
                        .HasColumnType("nvarchar(14)");

                    b.Property<string>("Surname")
                        .IsRequired()
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Patients", t =>
                        {
                            t.HasTrigger("PatientsUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.PrognozResult", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("BehaviorControl")
                        .HasColumnType("int");

                    b.Property<int?>("Communicate")
                        .HasColumnType("int");

                    b.Property<int?>("FuncCompensation")
                        .HasColumnType("int");

                    b.Property<int?>("FuncRecovery")
                        .HasColumnType("int");

                    b.Property<int?>("Learning")
                        .HasColumnType("int");

                    b.Property<int?>("MoveIndependently")
                        .HasColumnType("int");

                    b.Property<int?>("Orientate")
                        .HasColumnType("int");

                    b.Property<int?>("SelfService")
                        .HasColumnType("int");

                    b.Property<int?>("Work")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.ToTable("PrognozResult");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.RecipientType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("IdMse")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("RecipientType", null, t =>
                        {
                            t.HasTrigger("RecipientTypeUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.RehabPotential", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdMse")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.ToTable("RehabPotential");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.RehabPrognoz", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int?>("IdMse")
                        .HasColumnType("int");

                    b.Property<string>("Value")
                        .HasColumnType("nvarchar(4000)");

                    b.HasKey("Id");

                    b.ToTable("RehabPrognoz");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Report", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime>("CreatedTS")
                        .HasColumnType("datetime");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<string>("CustomEvent")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CustomExecutor")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<string>("CustomResult")
                        .HasMaxLength(128)
                        .HasColumnType("nvarchar(128)");

                    b.Property<DateTime?>("DatePerfomance")
                        .HasColumnType("datetime");

                    b.Property<int?>("EventSubtypeId")
                        .HasColumnType("int");

                    b.Property<int>("EventTypeId")
                        .HasColumnType("int");

                    b.Property<int?>("ExecutorId")
                        .HasColumnType("int");

                    b.Property<int>("IpraId")
                        .HasColumnType("int");

                    b.Property<string>("Note")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.Property<int?>("ResultId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("EventSubtypeId");

                    b.HasIndex("EventTypeId");

                    b.HasIndex("ExecutorId");

                    b.HasIndex("IpraId");

                    b.HasIndex("ResultId");

                    b.ToTable("Reports");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Result", b =>
                {
                    b.Property<int>("Id")
                        .HasColumnType("int");

                    b.Property<string>("MseName")
                        .HasMaxLength(1024)
                        .HasColumnType("nchar(1024)")
                        .IsFixedLength();

                    b.Property<string>("Name")
                        .HasMaxLength(1024)
                        .HasColumnType("nvarchar(1024)");

                    b.Property<string>("ShortName")
                        .HasMaxLength(64)
                        .HasColumnType("nvarchar(64)");

                    b.HasKey("Id");

                    b.ToTable("Result");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Role", b =>
                {
                    b.Property<int>("RoleId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("RoleId"));

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("RoleDescription")
                        .IsRequired()
                        .HasMaxLength(255)
                        .IsUnicode(false)
                        .HasColumnType("varchar(255)");

                    b.Property<string>("RoleName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("RoleId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Roles", t =>
                        {
                            t.HasTrigger("RolesUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Tasks", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int>("FileId")
                        .HasColumnType("int");

                    b.Property<int?>("GroupTaskId")
                        .HasColumnType("int");

                    b.Property<string>("LastnameMse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("Message")
                        .HasColumnType("nvarchar(4000)");

                    b.Property<DateTime?>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("NameMse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<string>("PatientGuidMse")
                        .HasMaxLength(36)
                        .HasColumnType("nvarchar(36)");

                    b.Property<string>("SnilsMse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.Property<int>("Status")
                        .HasColumnType("int");

                    b.Property<string>("SurnameMse")
                        .HasMaxLength(50)
                        .HasColumnType("nvarchar(50)");

                    b.HasKey("Id");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("FileId");

                    b.HasIndex("GroupTaskId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Task", null, t =>
                        {
                            t.HasTrigger("TaskUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.User", b =>
                {
                    b.Property<int>("UserId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserId"));

                    b.Property<bool>("AllMO")
                        .HasColumnType("bit");

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<bool?>("IsLocal")
                        .HasColumnType("bit");

                    b.Property<string>("MobileNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<DateTime?>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<string>("Name")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("OfficialNumber")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Password")
                        .IsUnicode(false)
                        .HasColumnType("varchar(4000)");

                    b.Property<string>("Patronymic")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Post")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("Surname")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserEmailAddress")
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasMaxLength(50)
                        .IsUnicode(false)
                        .HasColumnType("varchar(50)");

                    b.HasKey("UserId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.ToTable("Users", t =>
                        {
                            t.HasTrigger("UsersUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.UserMO", b =>
                {
                    b.Property<int>("UserMOsId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserMOsId"));

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<int?>("MOId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserMOsId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("MOId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("UserId");

                    b.ToTable("UserMOs", t =>
                        {
                            t.HasTrigger("UserMOsUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.UserRole", b =>
                {
                    b.Property<int>("UserRolesId")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("UserRolesId"));

                    b.Property<DateTime?>("CreatedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("CreatedUserId")
                        .HasColumnType("int");

                    b.Property<DateTime?>("ModifiedTS")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("datetime")
                        .HasDefaultValueSql("(getdate())");

                    b.Property<int>("ModifiedUserId")
                        .HasColumnType("int");

                    b.Property<int>("RoleId")
                        .HasColumnType("int");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("UserRolesId");

                    b.HasIndex("CreatedUserId");

                    b.HasIndex("ModifiedUserId");

                    b.HasIndex("RoleId");

                    b.HasIndex("UserId");

                    b.ToTable("UserRoles", t =>
                        {
                            t.HasTrigger("UserRolesUpdTS");
                        });

                    b.HasAnnotation("SqlServer:UseSqlOutputClause", false);
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.AddressType", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("AddressTypeCreatedUsers")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_AddressTypeCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("AddressTypeModifiedUsers")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_AddressTypeModifiedUser");

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Buro", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("BuroCreatedUsers")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_BuroCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("BuroModifiedUsers")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_BuroModifiedUser");

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Citizenship", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("CitizenshipCreatedUsers")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_CitizenshipCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("CitizenshipModifiedUsers")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_CitizenshipModifiedUser");

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.DocType", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("DocTypeCreatedUsers")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_DocTypeCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("DocTypeModifiedUsers")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_DocTypeModifiedUser");

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.EventSubtype", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.EventType", "Type")
                        .WithMany("EventSubtypes")
                        .HasForeignKey("TypeId")
                        .IsRequired()
                        .HasConstraintName("FK_EventSubtype_EventType");

                    b.Navigation("Type");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Files", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.Patient", "Patient")
                        .WithMany("Files")
                        .HasForeignKey("PatientId")
                        .HasConstraintName("fk_FilePatient");

                    b.Navigation("Patient");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.FuncCompensation", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("FuncCompensationCreatedUsers")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_FuncCompensationCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("FuncCompensationModifiedUsers")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_FuncCompensationModifiedUser");

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.FuncRecovery", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("FuncRecoveryCreatedUsers")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_FuncRecoveryCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("FuncRecoveryModifiedUsers")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_FuncRecoveryModifiedUser");

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.GroupsTask", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "User")
                        .WithMany("GroupsTasks")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_GroupsTasks_Users");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.HelpCategory", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("HelpCategoryCreatedUsers")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_HelpCategoryCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("HelpCategoryModifiedUsers")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_HelpCategoryModifiedUser");

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Ipra", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.Buro", "Buro")
                        .WithMany("Ipras")
                        .HasForeignKey("BuroId")
                        .IsRequired()
                        .HasConstraintName("fk_Buro");

                    b.HasOne("IpraAspNet.Domain.Entities.Citizenship", "Citizenship")
                        .WithMany("Ipras")
                        .HasForeignKey("CitizenshipId")
                        .HasConstraintName("fk_IpraCitizenship");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("IpraCreatedUsers")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_IpraCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.DysfunctionsDegree", "DD")
                        .WithMany("Ipras")
                        .HasForeignKey("DDId")
                        .HasConstraintName("FK_Ipra_DysfunctionsDegrees");

                    b.HasOne("IpraAspNet.Domain.Entities.Files", "Files")
                        .WithMany("Ipras")
                        .HasForeignKey("FileId")
                        .IsRequired()
                        .HasConstraintName("fk_IpraFile");

                    b.HasOne("IpraAspNet.Domain.Entities.AddressType", "LivingAddressType")
                        .WithMany("IpraLivingAddressTypes")
                        .HasForeignKey("LivingAddressTypeId")
                        .HasConstraintName("fk_IpraLivingAddressType");

                    b.HasOne("IpraAspNet.Domain.Entities.MO", "Mo")
                        .WithMany("IpraMos")
                        .HasForeignKey("MoId")
                        .HasConstraintName("fk_IpraMO");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("IpraModifiedUsers")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_IpraModifiedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.PrognozResult", "PR")
                        .WithMany("Ipras")
                        .HasForeignKey("PRId")
                        .HasConstraintName("FK_Ipra_PrognozResult");

                    b.HasOne("IpraAspNet.Domain.Entities.Patient", "Patient")
                        .WithMany("Ipras")
                        .HasForeignKey("PatientId")
                        .IsRequired()
                        .HasConstraintName("fk_IpraPatient");

                    b.HasOne("IpraAspNet.Domain.Entities.FuncCompensation", "PrognozCompensation")
                        .WithMany("Ipras")
                        .HasForeignKey("PrognozCompensationId")
                        .HasConstraintName("fk_IpraPrognozCompensation");

                    b.HasOne("IpraAspNet.Domain.Entities.FuncRecovery", "PrognozRecovery")
                        .WithMany("Ipras")
                        .HasForeignKey("PrognozRecoveryId")
                        .HasConstraintName("fk_IpraPrognozRecovery");

                    b.HasOne("IpraAspNet.Domain.Entities.RecipientType", "RecipientType")
                        .WithMany("Ipras")
                        .HasForeignKey("RecipientTypeId")
                        .HasConstraintName("fk_IpraRecipientType");

                    b.HasOne("IpraAspNet.Domain.Entities.AddressType", "RegAddressType")
                        .WithMany("IpraRegAddressTypes")
                        .HasForeignKey("RegAddressTypeId")
                        .HasConstraintName("fk_IpraRegAddressType");

                    b.HasOne("IpraAspNet.Domain.Entities.DocType", "RepresentativeAuthDocTypeNavigation")
                        .WithMany("IpraRepresentativeAuthDocTypeNavigations")
                        .HasForeignKey("RepresentativeAuthDocType")
                        .HasConstraintName("fk_IpraRepresentativeAuthDocType");

                    b.HasOne("IpraAspNet.Domain.Entities.DocType", "RepresentativeIdentDocTypeNavigation")
                        .WithMany("IpraRepresentativeIdentDocTypeNavigations")
                        .HasForeignKey("RepresentativeIdentDocType")
                        .HasConstraintName("fk_IpraRepresentativeIdentDocType");

                    b.HasOne("IpraAspNet.Domain.Entities.MO", "SenderMo")
                        .WithMany("IpraSenderMos")
                        .HasForeignKey("SenderMoId")
                        .HasConstraintName("fk_IpraSenderMo");

                    b.HasOne("IpraAspNet.Domain.Entities.IpraStatus", "Status")
                        .WithMany("Ipras")
                        .HasForeignKey("StatusId")
                        .IsRequired()
                        .HasConstraintName("fk_IpraStatus");

                    b.Navigation("Buro");

                    b.Navigation("Citizenship");

                    b.Navigation("CreatedUser");

                    b.Navigation("DD");

                    b.Navigation("Files");

                    b.Navigation("LivingAddressType");

                    b.Navigation("Mo");

                    b.Navigation("ModifiedUser");

                    b.Navigation("PR");

                    b.Navigation("Patient");

                    b.Navigation("PrognozCompensation");

                    b.Navigation("PrognozRecovery");

                    b.Navigation("RecipientType");

                    b.Navigation("RegAddressType");

                    b.Navigation("RepresentativeAuthDocTypeNavigation");

                    b.Navigation("RepresentativeIdentDocTypeNavigation");

                    b.Navigation("SenderMo");

                    b.Navigation("Status");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.IpraHelpCategory", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("IpraHelpCategoryCreatedUsers")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_IpraHelpCategoryCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.HelpCategory", "HelpCategory")
                        .WithMany("IpraHelpCategories")
                        .HasForeignKey("HelpCategoryId")
                        .IsRequired()
                        .HasConstraintName("fk_HelpCategory");

                    b.HasOne("IpraAspNet.Domain.Entities.Ipra", "Ipra")
                        .WithMany("IpraHelpCategories")
                        .HasForeignKey("IpraId")
                        .IsRequired()
                        .HasConstraintName("fk_Ipra");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("IpraHelpCategoryModifiedUsers")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_IpraHelpCategoryModifiedUser");

                    b.Navigation("CreatedUser");

                    b.Navigation("HelpCategory");

                    b.Navigation("Ipra");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.IpraMovesHistory", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("IpraMovesHistories")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_MovesHistoryCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.Ipra", "Ipra")
                        .WithMany("IpraMovesHistories")
                        .HasForeignKey("IpraId")
                        .IsRequired()
                        .HasConstraintName("fk_MovesHistoryIpra");

                    b.HasOne("IpraAspNet.Domain.Entities.Move", "Move")
                        .WithMany("IpraMovesHistories")
                        .HasForeignKey("MoveId")
                        .IsRequired()
                        .HasConstraintName("fk_MovesHistoryMove");

                    b.Navigation("CreatedUser");

                    b.Navigation("Ipra");

                    b.Navigation("Move");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.IpraStatus", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("IpraStatusCreatedUsers")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_IpraStatusCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("IpraStatusModifiedUsers")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_IpraStatusModifiedUser");

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.MO", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("MOCreatedUsers")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_MOCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("MOModifiedUsers")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_MOModifiedUser");

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Move", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("MoveCreatedUsers")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_MoveCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("MoveModifiedUsers")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_MoveModifiedUser");

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Patient", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("PatientCreatedUsers")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_PatientsCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("PatientModifiedUsers")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_PatientsModifiedUser");

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.RecipientType", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("RecipientTypeCreatedUsers")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_RecipientTypeCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("RecipientTypeModifiedUsers")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_RecipientTypeModifiedUser");

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Report", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("Reports")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("FK_Reports_Users");

                    b.HasOne("IpraAspNet.Domain.Entities.EventSubtype", "EventSubtype")
                        .WithMany("Reports")
                        .HasForeignKey("EventSubtypeId")
                        .HasConstraintName("FK_Reports_EventSubtype");

                    b.HasOne("IpraAspNet.Domain.Entities.EventType", "EventType")
                        .WithMany("Reports")
                        .HasForeignKey("EventTypeId")
                        .IsRequired()
                        .HasConstraintName("FK_Reports_EventType");

                    b.HasOne("IpraAspNet.Domain.Entities.Executor", "Executor")
                        .WithMany("Reports")
                        .HasForeignKey("ExecutorId")
                        .HasConstraintName("FK_Reports_Executors");

                    b.HasOne("IpraAspNet.Domain.Entities.Ipra", "Ipra")
                        .WithMany("Reports")
                        .HasForeignKey("IpraId")
                        .IsRequired()
                        .HasConstraintName("FK_Reports_Ipra");

                    b.HasOne("IpraAspNet.Domain.Entities.Result", "Result")
                        .WithMany("Reports")
                        .HasForeignKey("ResultId")
                        .HasConstraintName("FK_Reports_Result");

                    b.Navigation("CreatedUser");

                    b.Navigation("EventSubtype");

                    b.Navigation("EventType");

                    b.Navigation("Executor");

                    b.Navigation("Ipra");

                    b.Navigation("Result");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Role", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("RoleCreatedUsers")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_RolesCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("RoleModifiedUsers")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_RolesModifiedUser");

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Tasks", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("TaskCreatedUsers")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_TaskCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.Files", "Files")
                        .WithMany("Tasks")
                        .HasForeignKey("FileId")
                        .IsRequired()
                        .HasConstraintName("fk_TaskFile");

                    b.HasOne("IpraAspNet.Domain.Entities.GroupsTask", "GroupTask")
                        .WithMany("Tasks")
                        .HasForeignKey("GroupTaskId")
                        .HasConstraintName("FK_Task_GroupsTasks");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("TaskModifiedUsers")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_TaskModifiedUser");

                    b.Navigation("CreatedUser");

                    b.Navigation("Files");

                    b.Navigation("GroupTask");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.User", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("InverseCreatedUser")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_UsersCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("InverseModifiedUser")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_UsersModifiedUser");

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.UserMO", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("UserMOCreatedUsers")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_UserMOsCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.MO", "MO")
                        .WithMany("UserMOs")
                        .HasForeignKey("MOId")
                        .HasConstraintName("FK_UserMOs_MO");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("UserMOModifiedUsers")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_UserMOsModifiedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "User")
                        .WithMany("UserMOUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserMOs_Users");

                    b.Navigation("CreatedUser");

                    b.Navigation("MO");

                    b.Navigation("ModifiedUser");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.UserRole", b =>
                {
                    b.HasOne("IpraAspNet.Domain.Entities.User", "CreatedUser")
                        .WithMany("UserRoleCreatedUsers")
                        .HasForeignKey("CreatedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_UserRolesCreatedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "ModifiedUser")
                        .WithMany("UserRoleModifiedUsers")
                        .HasForeignKey("ModifiedUserId")
                        .IsRequired()
                        .HasConstraintName("fk_UserRolesModifiedUser");

                    b.HasOne("IpraAspNet.Domain.Entities.Role", "Role")
                        .WithMany("UserRoles")
                        .HasForeignKey("RoleId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Roles");

                    b.HasOne("IpraAspNet.Domain.Entities.User", "User")
                        .WithMany("UserRoleUsers")
                        .HasForeignKey("UserId")
                        .IsRequired()
                        .HasConstraintName("FK_UserRoles_Users");

                    b.Navigation("CreatedUser");

                    b.Navigation("ModifiedUser");

                    b.Navigation("Role");

                    b.Navigation("User");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.AddressType", b =>
                {
                    b.Navigation("IpraLivingAddressTypes");

                    b.Navigation("IpraRegAddressTypes");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Buro", b =>
                {
                    b.Navigation("Ipras");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Citizenship", b =>
                {
                    b.Navigation("Ipras");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.DocType", b =>
                {
                    b.Navigation("IpraRepresentativeAuthDocTypeNavigations");

                    b.Navigation("IpraRepresentativeIdentDocTypeNavigations");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.DysfunctionsDegree", b =>
                {
                    b.Navigation("Ipras");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.EventSubtype", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.EventType", b =>
                {
                    b.Navigation("EventSubtypes");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Executor", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Files", b =>
                {
                    b.Navigation("Ipras");

                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.FuncCompensation", b =>
                {
                    b.Navigation("Ipras");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.FuncRecovery", b =>
                {
                    b.Navigation("Ipras");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.GroupsTask", b =>
                {
                    b.Navigation("Tasks");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.HelpCategory", b =>
                {
                    b.Navigation("IpraHelpCategories");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Ipra", b =>
                {
                    b.Navigation("IpraHelpCategories");

                    b.Navigation("IpraMovesHistories");

                    b.Navigation("Reports");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.IpraStatus", b =>
                {
                    b.Navigation("Ipras");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.MO", b =>
                {
                    b.Navigation("IpraMos");

                    b.Navigation("IpraSenderMos");

                    b.Navigation("UserMOs");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Move", b =>
                {
                    b.Navigation("IpraMovesHistories");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Patient", b =>
                {
                    b.Navigation("Files");

                    b.Navigation("Ipras");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.PrognozResult", b =>
                {
                    b.Navigation("Ipras");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.RecipientType", b =>
                {
                    b.Navigation("Ipras");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Result", b =>
                {
                    b.Navigation("Reports");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.Role", b =>
                {
                    b.Navigation("UserRoles");
                });

            modelBuilder.Entity("IpraAspNet.Domain.Entities.User", b =>
                {
                    b.Navigation("AddressTypeCreatedUsers");

                    b.Navigation("AddressTypeModifiedUsers");

                    b.Navigation("BuroCreatedUsers");

                    b.Navigation("BuroModifiedUsers");

                    b.Navigation("CitizenshipCreatedUsers");

                    b.Navigation("CitizenshipModifiedUsers");

                    b.Navigation("DocTypeCreatedUsers");

                    b.Navigation("DocTypeModifiedUsers");

                    b.Navigation("FuncCompensationCreatedUsers");

                    b.Navigation("FuncCompensationModifiedUsers");

                    b.Navigation("FuncRecoveryCreatedUsers");

                    b.Navigation("FuncRecoveryModifiedUsers");

                    b.Navigation("GroupsTasks");

                    b.Navigation("HelpCategoryCreatedUsers");

                    b.Navigation("HelpCategoryModifiedUsers");

                    b.Navigation("InverseCreatedUser");

                    b.Navigation("InverseModifiedUser");

                    b.Navigation("IpraCreatedUsers");

                    b.Navigation("IpraHelpCategoryCreatedUsers");

                    b.Navigation("IpraHelpCategoryModifiedUsers");

                    b.Navigation("IpraModifiedUsers");

                    b.Navigation("IpraMovesHistories");

                    b.Navigation("IpraStatusCreatedUsers");

                    b.Navigation("IpraStatusModifiedUsers");

                    b.Navigation("MOCreatedUsers");

                    b.Navigation("MOModifiedUsers");

                    b.Navigation("MoveCreatedUsers");

                    b.Navigation("MoveModifiedUsers");

                    b.Navigation("PatientCreatedUsers");

                    b.Navigation("PatientModifiedUsers");

                    b.Navigation("RecipientTypeCreatedUsers");

                    b.Navigation("RecipientTypeModifiedUsers");

                    b.Navigation("Reports");

                    b.Navigation("RoleCreatedUsers");

                    b.Navigation("RoleModifiedUsers");

                    b.Navigation("TaskCreatedUsers");

                    b.Navigation("TaskModifiedUsers");

                    b.Navigation("UserMOCreatedUsers");

                    b.Navigation("UserMOModifiedUsers");

                    b.Navigation("UserMOUsers");

                    b.Navigation("UserRoleCreatedUsers");

                    b.Navigation("UserRoleModifiedUsers");

                    b.Navigation("UserRoleUsers");
                });
#pragma warning restore 612, 618
        }
    }
}
